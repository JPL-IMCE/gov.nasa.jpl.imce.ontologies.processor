import java.util.zip.ZipFile

//Variables
def buildDir = "build"
def dependenciesDir = buildDir + "/" + "dependencies" 
def toolsDir =  buildDir + "/" + "tools"

apply plugin: 'java'

repositories {
    maven {
        url 'https://cae-artifactory.jpl.nasa.gov/artifactory/maven-libs-release-virtual'
        credentials {
            username artifactoryUser
            password artifactoryPassword
        }
    }
    maven {
    	url "https://dl.bintray.com/jpl-imce/gov.nasa.jpl.imce"
    }
}

dependencies {
	compile(group: 'gov.nasa.jpl.imce', 
            name: 'gov.nasa.jpl.imce.ontologies.tools', 
            version: '0.8.0', ext: 'zip', 
            classifier: 'resource')
    compile(group: 'net.sf.docbook', 
            name: 'docbook-xsl', 
            version: '1.79.1',
            ext: 'zip',
            classifier: 'resources')
    compile(group: 'gov.nasa.jpl.imce',
            name: 'gov.nasa.jpl.imce.oml.converters_2.11',
            version: '0.1.1.0',
            classifier: 'resource',
            ext: 'tgz')
}

task extractTools (type: Copy) {

    File dep
    dep = file(dependenciesDir)
    // Create a file collection using a closure
    def collection = configurations.default

    // Extract files
    collection.collect { it }.sort().each {
        if (it.name.contains(".zip")) {
            from zipTree(it)
            into toolsDir
        } else if (it.name.endsWith(".tgz")) {
            from tarTree(it)
            into toolsDir

            // In gradle, how to do the equivalent of the following?
            //
            // mkdir omlConverter
            // (cd omlConverter; tar -zxf *.tgz --strip-components 1)

            // This is an approximation, the result is two folders:
            // 1) gov-nasa-jpl-imce-oml-converters-<version>
            // 2) omlConverter

            // (1) should not have been created by the renaming below!
            eachFile { FileCopyDetails fcp ->
                if (fcp.relativePath.segments[0].startsWith("gov-nasa-jpl-imce-oml-converters")) {
                    fcp.relativePath.segments[0] = "omlConverter"
                }
            }
        }
    }

}

task cleanSuperfluous(dependsOn: extractTools) {

    doLast {
        println("toolsDir=$toolsDir")

        files { file(toolsDir).listFiles() }.filter { it.name.startsWith("gov")}.forEach {

            println("Deleting: $it")
            it.deleteDir()
        }

    }
}